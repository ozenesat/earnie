{"version":3,"sources":["pages/apps/helpdesk-dashboard/index.js","components/kit/widgets/General/2/index.js","components/kit/widgets/General/2v1/index.js","components/kit/widgets/General/2v2/index.js","components/kit/widgets/Tables/7/index.js","components/kit/widgets/Tables/7/style.module.scss"],"names":["columns","title","dataIndex","key","className","render","text","href","onClick","e","preventDefault","type","ExtraAppsHelpdeskDashboard","useState","name","checked","expanded","children","treeData","setTreeData","getNodeKey","treeIndex","onChange","tree","generateNodeProps","node","path","event","target","changeNodeAtPath","newNode","dataSource","data","pagination","General2","General2v1","General2v2","users","length","map","user","Math","random","src","alt","rowSelection","selectedRowKeys","selectedRows","console","log","Table7","style","textDivider","textDividerContent","table","module","exports"],"mappings":"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","file":"static/js/31.4da733ff.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport { Helmet } from 'react-helmet'\nimport { Table, Checkbox } from 'antd'\nimport PerfectScrollbar from 'react-perfect-scrollbar'\nimport SortableTree, { changeNodeAtPath } from 'react-sortable-tree'\nimport General2 from 'components/kit/widgets/General/2'\nimport General2v1 from 'components/kit/widgets/General/2v1'\nimport General2v2 from 'components/kit/widgets/General/2v2'\nimport Table7 from 'components/kit/widgets/Tables/7'\nimport data from './data.json'\n\nconst columns = [\n  {\n    title: 'Date',\n    dataIndex: 'date',\n    key: 'date',\n    className: 'bg-transparent text-gray-6',\n  },\n  {\n    title: 'Title',\n    dataIndex: 'title',\n    key: 'title',\n    className: 'bg-transparent text-gray-6',\n  },\n  {\n    title: 'Email',\n    dataIndex: 'email',\n    key: 'email',\n    className: 'bg-transparent',\n    render: text => {\n      return (\n        <a href=\"#\" onClick={e => e.preventDefault()} className=\"text-blue\">\n          {text}\n        </a>\n      )\n    },\n  },\n  {\n    title: 'Actions',\n    dataIndex: 'actions',\n    key: 'actions',\n    className: 'text-right bg-transparent text-gray-6',\n    render: () => (\n      <button type=\"button\" className=\"btn btn-outline-success\">\n        Resolve\n      </button>\n    ),\n  },\n]\n\nconst ExtraAppsHelpdeskDashboard = () => {\n  const treeDataDefault = [\n    { name: 'IT Manager', checked: true },\n    {\n      name: 'Regional Managers',\n      expanded: true,\n      children: [\n        { name: 'Branch Manager', checked: true },\n        { name: 'QA Engineer', checked: true },\n        { name: 'Network Administrator', checked: false },\n        { name: 'Project Manager', checked: false },\n        { name: 'Team Leader', checked: true },\n      ],\n    },\n  ]\n\n  const [treeData, setTreeData] = useState(treeDataDefault)\n  const getNodeKey = ({ treeIndex }) => treeIndex\n\n  return (\n    <div>\n      <Helmet title=\"Helpdesk Dashboard\" />\n      <div className=\"row\">\n        <div className=\"col-lg-4\">\n          <div className=\"card\">\n            <div className=\"card-body\">\n              <General2 />\n            </div>\n          </div>\n        </div>\n        <div className=\"col-lg-4\">\n          <div className=\"card\">\n            <div className=\"card-body\">\n              <General2v1 />\n            </div>\n          </div>\n        </div>\n        <div className=\"col-lg-4\">\n          <div className=\"card\">\n            <div className=\"card-body\">\n              <General2v2 />\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col-lg-5\">\n          <div className=\"card\">\n            <div className=\"card-body\">\n              <h6 className=\"text-uppercase text-dark font-weight-bold mb-3\">To Do</h6>\n              <p className=\"mb-3\">Welcome to Todoist! Let&apos;s get you started with a few tips</p>\n              <div className=\"height-300\">\n                <PerfectScrollbar>\n                  <div className=\"height-300\">\n                    <SortableTree\n                      treeData={treeData}\n                      onChange={tree => setTreeData(tree)}\n                      generateNodeProps={({ node, path }) => ({\n                        title: !node.children ? (\n                          <Checkbox\n                            checked={node.checked}\n                            onChange={event => {\n                              const { checked } = event.target\n                              setTreeData(\n                                changeNodeAtPath({\n                                  treeData,\n                                  path,\n                                  getNodeKey,\n                                  newNode: { ...node, checked },\n                                }),\n                              )\n                            }}\n                          >\n                            {node.name}\n                          </Checkbox>\n                        ) : (\n                          <span>{node.name}:</span>\n                        ),\n                      })}\n                    />\n                  </div>\n                </PerfectScrollbar>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"col-lg-7\">\n          <div className=\"card\">\n            <div className=\"card-body\">\n              <h6 className=\"text-uppercase text-dark font-weight-bold mb-3\">\n                Recent help requests\n              </h6>\n              <div className=\"kit__utils__table\">\n                <Table columns={columns} dataSource={data} pagination={false} />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col-lg-12\">\n          <div className=\"card\">\n            <div className=\"card-body\">\n              <Table7 />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default ExtraAppsHelpdeskDashboard\n","import React from 'react'\n\nconst General2 = () => {\n  return (\n    <div className=\"d-flex flex-wrap align-items-center\">\n      <div className=\"mr-auto\">\n        <p className=\"text-uppercase text-dark font-weight-bold mb-1\">Your profit</p>\n        <p className=\"text-gray-5 mb-0\">Average Weekly Profit</p>\n      </div>\n      <p className=\"text-success font-weight-bold font-size-24 mb-0\">+29,931</p>\n    </div>\n  )\n}\n\nexport default General2\n","import React from 'react'\n\nconst General2v1 = () => {\n  return (\n    <div className=\"d-flex flex-wrap align-items-center\">\n      <div className=\"mr-auto\">\n        <p className=\"text-uppercase text-dark font-weight-bold mb-1\">Orders</p>\n        <p className=\"text-gray-5 mb-0\">All Time Orders</p>\n      </div>\n      <p className=\"text-primary font-weight-bold font-size-24 mb-0\">1,800</p>\n    </div>\n  )\n}\n\nexport default General2v1\n","import React from 'react'\n\nconst General2v2 = () => {\n  return (\n    <div className=\"d-flex flex-wrap align-items-center\">\n      <div className=\"mr-auto\">\n        <p className=\"text-uppercase text-dark font-weight-bold mb-1\">Refunds</p>\n        <p className=\"text-gray-5 mb-0\">Averache Weekly Reunds</p>\n      </div>\n      <p className=\"text-danger font-weight-bold font-size-24 mb-0\">-$8,474</p>\n    </div>\n  )\n}\n\nexport default General2v2\n","import React from 'react'\nimport { Table } from 'antd'\nimport data from './data.json'\nimport style from './style.module.scss'\n\nconst columns = [\n  {\n    title: 'ACTION NAME',\n    dataIndex: 'actionName',\n    key: 'actionName',\n    className: 'text-gray-6',\n  },\n  {\n    title: 'LOCATION',\n    dataIndex: 'location',\n    key: 'location',\n    className: 'text-gray-6',\n    render: text => {\n      return <a className=\"text-blue\">{text}</a>\n    },\n  },\n  {\n    title: 'VALUE',\n    dataIndex: 'value',\n    key: 'value',\n    className: 'text-gray-6',\n    render: text => <span className=\"font-weight-bold\">{text}</span>,\n  },\n  {\n    title: 'DESCRIPTION',\n    dataIndex: 'description',\n    key: 'description',\n    className: 'text-gray-6',\n  },\n  {\n    dataIndex: 'users',\n    key: 'users',\n    render: users => {\n      return (\n        <div className={`kit__utils__avatarGroup ${users.length ? '' : 'd-none'}`}>\n          {users.map(user => (\n            <div key={Math.random()} className=\"kit__utils__avatar kit__utils__avatar--rounded\">\n              <img src={user} alt=\"User Avatar\" />\n            </div>\n          ))}\n          <button type=\"button\" className=\"kit__utils__avatarGroupAdd\">\n            <i className=\"fe fe-plus\" />\n          </button>\n        </div>\n      )\n    },\n  },\n  {\n    dataIndex: 'action',\n    key: 'action',\n    className: 'text-right',\n    render: () => {\n      return (\n        <div className=\"text-nowrap\">\n          <button type=\"button\" className=\"btn btn-outline-success mr-2 mb-2\">\n            Accept\n          </button>\n        </div>\n      )\n    },\n  },\n]\n\nconst rowSelection = {\n  onChange: (selectedRowKeys, selectedRows) => {\n    console.log(`selectedRowKeys: ${selectedRowKeys}`, 'selectedRows: ', selectedRows)\n  },\n}\n\nconst Table7 = () => {\n  return (\n    <div>\n      <div className={`${style.textDivider} mb-2`}>\n        <h4 className={`${style.textDividerContent} font-size-24 font-weight-bold`}>\n          Active Users\n        </h4>\n      </div>\n      <div className={style.table}>\n        <Table columns={columns} dataSource={data} pagination={false} rowSelection={rowSelection} />\n      </div>\n    </div>\n  )\n}\n\nexport default Table7\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"table\":\"style_table__2aCkI\",\"textDivider\":\"style_textDivider__2nXcr\",\"textDividerContent\":\"style_textDividerContent__3_FRO\"};"],"sourceRoot":""}